// Create our map, set draw control to display drawing toolbar

const map = L.map('map', { drawControl: true , crs: L.CRS.Simple});
const iiif_svc = 'svc:iiif/full/full/0/default.jpg';
const tsrct = 'svc:tesseract/full/full/0/default.jpg';
const scaler = 10; //scale difference between pixels and lat/lon

var img_host = 'http://localhost:3000/fcrepo/rest/';
var img_loc = 'collection/example_3-catalogs/catalogs/199/media/images/199-3';
var src = img_host + img_loc + '/' + iiif_svc;

// Create new image  object, this will allow the pre-caching of the image before it loads into leaflet
// This allows us to take the dimensions of the image and use them to define the bounds of the leaflet "map"
var img = new Image();
var imgH = 0;
var imgW = 0;
img.addEventListener("load",function(){
    imgH = this.naturalHeight;
    imgW = this.naturalWidth;
    let bounds = [[0,0], [imgH/10, imgW/scaler]];
    var image = L.imageOverlay(src, bounds).addTo(map);
    map.fitBounds(bounds);
});
// this MUST occur after the image load function, or it won't get the dimensions properly
img.src = src;

// Add the leaflet draw API to the image to allow the creation of boxes
// TODO: remove ability to make shapes other than rectangles
var drawnItems = new L.FeatureGroup();
map.addLayer(drawnItems);
var drawControl = new L.Control.Draw({
    edit: {
        featureGroup: drawnItems
    }
});

// When a box is drawn on the image, same the box info (corners, dimensions, etc) create JSON object and
// send to tesseract
map.on('draw:created', function(e) {
    let type = e.layerType,
        layer = e.layer;

    let shape = layer.toGeoJSON();
    let shape_for_db = JSON.stringify(shape);
    console.log("Shape: " + shape_for_db);

    drawnItems.addLayer(layer);

    let coords = layer.getLatLngs();
    let box = JSON.stringify(convert(coords));
    console.log("Box: " + box);
    post(box);
});


// Send created JSON object to server to be run in tesseract
// for now, print response to console
function post(data){
    let xhr = new XMLHttpRequest();

    xhr.open("POST", 'tesseract', true);
    xhr.setRequestHeader("Content-Type", "application/json");
    xhr.onreadystatechange = function () {
        if (xhr.readyState === 4 && xhr.status === 200) {
            console.log(this.responseText);
        }
    };
    xhr.send(data);
}


// Convert the coordinates generated by leaflet Draw into a format usable by tesseract
// called in "map.on('draw:created', function(e)"
function convert(coords){

    // lat = x, lon = y
    // rectangle drawn clockwise starting with south west corner
    // points need to be scaled up by 10 to equate to pixels
    let sw = upscale(coords[0]);
    let nw = upscale(coords[1]);
    let ne = upscale(coords[2]);
    let se = upscale(coords[3]);

    // Round values to remove any decimals, which would confuse tesseract
    wdth = Math.round(se[0] - sw[0]);
    hght = Math.round(ne[1] - se[1]);

    // leaflet calculates y as distance from bottom
    // tesseract y is distance from top
    // origin y = img height - nothern most y coordinate
    let x_loc = Math.round(nw[0]);
    let y_loc = Math.round(imgH - nw[1]);

    return {
        image_path:img_loc,
        box_x_loc:x_loc,
        box_y_loc:y_loc,
        box_width:wdth,
        box_height:hght,
        rotation_angle:0
    }
}

// scales the coordinates from latLon to pixels
function upscale(latLon) {
    return [latLon["lng"] * scaler, latLon["lat"] * scaler]
}